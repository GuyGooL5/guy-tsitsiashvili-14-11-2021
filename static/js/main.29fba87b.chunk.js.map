{"version":3,"sources":["redux/reducers/favoritesReducer.ts","config.ts","utils/LocalStorage.ts","redux/reducers/configurationReducer.ts","redux/reducers/forecastReducer.ts","redux/store.ts","assets/weatherIcons.tsx","utils/functions.ts","actions/setLocation.ts","components/FavoritesPage/FavoriteCard/WeatherDetailsBox.tsx","components/FavoritesPage/FavoriteCard/FavoriteDataContent.tsx","components/FavoritesPage/FavoriteCard/FavoriteErrorContent.tsx","components/FavoritesPage/FavoriteCard/FavoriteCardHeader.tsx","actions/getCurrentCondition.ts","components/FavoritesPage/FavoriteCard/index.tsx","components/ThemeToggleModal.tsx","components/Navbar.tsx","components/FavoritesPage/index.tsx","router/FavoritesRoute.tsx","hooks/useAutocomplete.tsx","components/AutocompleteSearchbar.tsx","actions/getForecast.ts","hooks/useSnackbar.tsx","components/ForecastSummary/DailyDetailsBox.tsx","components/ForecastSummary/DailyDetails.tsx","components/ForecastSummary/DailyDetailsContainer.tsx","components/ForecastSummary/ForecastSummaryButtons.tsx","components/ForecastSummary/LoadingSkeleton.tsx","components/ForecastSummary/MinimalDetails.tsx","components/ForecastSummary/index.tsx","router/ForecastRoute.tsx","router/HomeRoute.tsx","router/index.tsx","actions/getGeolocationData.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["data","config","accuWeatherAPIKey","process","REACT_APP_ACCU_WEATHER_API_KEY","defaultLocation","Key","LocalizedName","LocalStorage","key","localStorage","getItem","JSON","parse","ignored","setItem","stringify","keys","removeItem","initialState","theme","get","unit","default_location","show_night","Date","getHours","configurationSlice","createSlice","name","reducers","set_theme","state","payload","set","set_unit","set_default_location","set_night","configurationSliceActions","actions","toLocationDataMap","Object","fromEntries","entries","map","location","favorites","currentCondition","favoritesSlice","add_favorite","set_current_condition","console","error","remove_favorite","favoritesSliceActions","forecast","forecastSlice","set_forecast","set_location","forecastSliceActions","reduxStore","configureStore","reducer","configuration","configurationReducer","favoritesReducer","forecastReducer","useReduxDispatch","useDispatch","useReduxSelector","useSelector","weatherIcons","1","day","night","Icon","WiDaySunny","2","3","WiDaySunnyOvercast","4","5","WiDayHaze","6","WiDayCloudy","7","WiCloudy","8","11","WiFog","12","WiShowers","13","WiDayShowers","14","15","WiThunderstorm","16","WiDayThunderstorm","17","18","WiRain","19","WiSnow","20","WiDaySnow","21","22","23","24","WiSnowflakeCold","25","WiSleet","26","WiRainMix","29","30","WiHot","31","32","WiStrongWind","33","WiNightClear","34","WiNightPartlyCloudy","35","36","WiNightCloudy","37","WiNightFog","38","39","WiNightShowers","40","41","WiNightThunderstorm","42","WiNightSnow","43","44","getTheme","selectedTheme","matchMedia","matches","getDirectionDegree","direction","getWeatherStyle","WeatherIcon","background","color","setLocation","navigateTo","dispatch","navigate","WeatherDetailsBox","WeatherText","Temperature","Wi","useMemo","Box","display","size","style","position","paddingTop","paddingLeft","Typography","variant","sx","width","textAlign","px","pt","pb","Value","Unit","ExtraWind","speed","Grid","container","item","fontWeight","ArrowRightAlt","transform","alignSelf","ExtraHumidity","humidity","FavoriteDataContent","favorite","s","useNavigate","CardActionArea","onClick","CardContent","Wind","Speed","Direction","English","RelativeHumidity","FavoriteErrorContent","onRemove","CardActions","Button","FavoriteCardHeader","title","editMode","loading","onRefresh","CardHeader","action","IconButton","Delete","aria-label","Replay","getCurrentCondition","language","a","params","URLSearchParams","append","url","toString","fetch","response","json","LoadingContent","flexGrow","CircularProgress","FavoriteCard","useState","setError","setLoading","remove","useCallback","refresh","useEffect","RenderData","Card","flexDirection","justifyContent","minWidth","height","ThemeMenu","props","selectTheme","value","onClose","Menu","MenuItem","CollapseButton","text","collapsed","startIcon","Navbar","useLocation","themeMenuAnchor","setThemeMenuAnchor","xs","useMediaQuery","_theme","breakpoints","down","currentLocation","pathname","ThemeIcon","BrightnessHigh","Brightness2","BrightnessAuto","AppBar","Toolbar","edge","mr","Home","Favorite","mx","e","currentTarget","anchorEl","open","withNavbar","WrappedComponent","navbarProps","setEditMode","Container","maxWidth","my","Done","Edit","spacing","sm","md","lg","xl","FavoritesRoute","fetchPredictions","query","useAutocomplete","autocompleteConfig","predictions","setPredictions","getPredictions","input","PredictionItem","countryCode","option","alignItems","LocationOn","AdministrativeArea","Country","ID","toUpperCase","replace","char","String","fromCodePoint","charCodeAt","AutocompleteSearchbar","inputString","setInputString","Autocomplete","fullWidth","autoComplete","options","filterOptions","x","onChange","v","onSelect","getOptionLabel","isOptionEqualToValue","renderInput","TextField","label","target","InputProps","type","endAdornment","renderOption","getForecast","unitSystem","Error","Context","createContext","SnackbarContextProvider","children","setOpen","message","setMessage","setConfig","handleClose","onDismiss","snackbarHandler","close","snackbar","msg","snConfig","Provider","Snackbar","autoHideDuration","anchorOrigin","horizontal","vertical","buttons","useSnackbar","useContext","MinMaxText","min","max","DailyDetailsBox","weatherText","iconSize","iconIndex","Minimum","Maximum","DailyDetails","time","index","icon","Night","Day","offset","getDay","substr","IconPhrase","DailyDetailsContainer","daily","ForecastSummaryButtons","favorited","includes","float","FavoriteBorder","Thermostat","newUnit","WbSunny","NightsStay","LoadingSkeleton","Skeleton","Array","fill","i","p","MinimalDetail","ForecastHeadline","small","alignContent","ForecastSummary","memo","id","DailyForecasts","component","CardMedia","flexWrap","left","Headline","Text","prev","next","ForecastRoute","useParams","path","element","AppRouter","getGeolocationData","lat","lng","searchParams","DarkModeApp","createTheme","palette","mode","ThemeProvider","CssBaseline","navigator","geolocation","GeolocationEnabledApp","getCurrentPosition","coords","latitude","longitude","App","store","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29fba87b.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { LocationData } from \"../../types\";\r\nimport { CurrentConditionData } from \"../../types/interfaces/CurrentConditionData\";\r\nimport { FavoriteData, FavoritesState } from \"../../types/states\";\r\nimport LocalStorage from \"../../utils/LocalStorage\";\r\n\r\ntype FavoriteMap<Data> = { [Key: string]: Data };\r\n\r\n//These functions convert the data map from FavoriteData to LocationData.\r\nconst toLocationDataMap = (data: FavoriteMap<FavoriteData>) => Object.fromEntries(Object.entries(data).map(([k, v]) => [k, v.location]));\r\nconst toFavoriteDataMap = (data: FavoriteMap<LocationData>) => Object.fromEntries(Object.entries(data).map(([k, v]) => [k, { location: v, currentCondition: null }]));\r\n\r\nconst initialState: FavoritesState = {\r\n    favorites: toFavoriteDataMap(LocalStorage.get(\"favorites\") ?? {})\r\n};\r\n\r\nconst favoritesSlice = createSlice({\r\n    name: \"favorites\",\r\n    initialState,\r\n    reducers: {\r\n        add_favorite: (state, { payload }: PayloadAction<LocationData>) => {\r\n            state.favorites[payload.Key] = { location: payload, currentCondition: null };\r\n            LocalStorage.set(\"favorites\", toLocationDataMap(state.favorites));\r\n        },\r\n        set_current_condition: (state, { payload }: PayloadAction<{ Key: string, currentCondition: CurrentConditionData | null }>) => {\r\n            if (!state.favorites[payload.Key]) {\r\n                console.error(`Key \"${payload.Key}\" doesn't exist on favorites slice, trying to set condition to nonexistent favorite`);\r\n                return;\r\n            }\r\n            state.favorites[payload.Key].currentCondition = payload.currentCondition;\r\n        },\r\n        remove_favorite: (state, { payload }: PayloadAction<string>) => {\r\n\r\n            //TODO: error handling.\r\n            delete state.favorites[payload];\r\n            LocalStorage.set(\"favorites\", toLocationDataMap(state.favorites));\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport const favoritesSliceActions = { ...favoritesSlice.actions };\r\n\r\nexport default favoritesSlice.reducer;","import { LocationData } from \"./types\";\r\n\r\ntype EnvironmentVaribles =\r\n    | \"REACT_APP_ACCU_WEATHER_API_KEY\"\r\n    ;\r\n\r\nconst env = process.env as NodeJS.ProcessEnv & Record<EnvironmentVaribles, string>;\r\n\r\ninterface AppConfig {\r\n    accuWeatherAPIKey: string;\r\n    defaultLocation: LocationData;\r\n}\r\n\r\n\r\nconst config: AppConfig = {\r\n    accuWeatherAPIKey: env.REACT_APP_ACCU_WEATHER_API_KEY,\r\n    defaultLocation: { Key: \"215854\", LocalizedName: \"Tel Aviv\" },\r\n}\r\n\r\nexport default config;","import { LocationData } from \"../types\";\r\nimport { ConfigurationState } from \"../types/states\";\r\n\r\ninterface LocalStorageData {\r\n    theme: ConfigurationState[\"theme\"];\r\n    unit: ConfigurationState[\"unit\"];\r\n    favorites: { [k: string]: LocationData };\r\n    default_location: ConfigurationState[\"default_location\"];\r\n}\r\n\r\nexport default class LocalStorage {\r\n\r\n    static get<K extends keyof LocalStorageData>(key: K): LocalStorageData[K] | null {\r\n        const data = localStorage.getItem(key);\r\n        if (!data) return null;\r\n        try {\r\n            return JSON.parse(data);\r\n        } catch (ignored) { return null; }\r\n    }\r\n\r\n    static set<K extends keyof LocalStorageData>(key: K, data: LocalStorageData[K]): void {\r\n        localStorage.setItem(key, JSON.stringify(data));\r\n    }\r\n\r\n    static remove<K extends keyof LocalStorageData>(...keys: K[]): void {\r\n        for (const key of keys) localStorage.removeItem(key);\r\n    }\r\n}","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport config from \"../../config\";\r\nimport { ConfigurationState } from \"../../types/states\";\r\nimport LocalStorage from \"../../utils/LocalStorage\";\r\n\r\n\r\n\r\nconst initialState: ConfigurationState = {\r\n    theme: LocalStorage.get(\"theme\") ?? \"default\",\r\n    unit: LocalStorage.get(\"unit\") ?? \"Metric\",\r\n    default_location: LocalStorage.get(\"default_location\") ?? config.defaultLocation,\r\n    show_night: new Date().getHours() > 17\r\n};\r\n\r\nconst configurationSlice = createSlice({\r\n    name: \"configuration\",\r\n    initialState,\r\n    reducers: {\r\n        set_theme: (state, { payload }: PayloadAction<ConfigurationState[\"theme\"]>) => {\r\n            LocalStorage.set(\"theme\", payload);\r\n            state.theme = payload;\r\n        },\r\n        set_unit: (state, { payload }: PayloadAction<ConfigurationState[\"unit\"]>) => {\r\n            LocalStorage.set(\"unit\", payload);\r\n            state.unit = payload;\r\n        },\r\n        set_default_location: (state, { payload }: PayloadAction<ConfigurationState[\"default_location\"]>) => {\r\n            LocalStorage.set(\"default_location\",payload);\r\n            state.default_location=payload;\r\n        },\r\n        set_night: (state, { payload }: PayloadAction<ConfigurationState[\"show_night\"]>) => {\r\n            state.show_night = payload;\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport const configurationSliceActions = { ...configurationSlice.actions };\r\n\r\nexport default configurationSlice.reducer;","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport config from \"../../config\";\r\nimport { LocationData } from \"../../types\";\r\nimport { ForecastData } from \"../../types/interfaces/ForecastData\";\r\nimport { ForecastState } from \"../../types/states\";\r\nimport LocalStorage from \"../../utils/LocalStorage\";\r\n\r\n\r\n\r\nconst initialState: ForecastState = {\r\n    location: LocalStorage.get(\"default_location\") ?? config.defaultLocation,\r\n    forecast: null\r\n};\r\n\r\nconst forecastSlice = createSlice({\r\n    name: \"forecast\",\r\n    initialState,\r\n    reducers: {\r\n\r\n        set_forecast: (state, { payload }: PayloadAction<ForecastData | null>) => {\r\n            state.forecast = payload;\r\n        },\r\n        set_location: (state, { payload }: PayloadAction<LocationData>) => {\r\n            state.location = payload;\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport const forecastSliceActions = { ...forecastSlice.actions };\r\n\r\nexport default forecastSlice.reducer;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport configurationReducer from \"./reducers/configurationReducer\";\r\nimport favoritesReducer from \"./reducers/favoritesReducer\";\r\nimport forecastReducer from \"./reducers/forecastReducer\";\r\n\r\nexport const reduxStore = configureStore({\r\n    reducer: {\r\n        configuration: configurationReducer,\r\n        favorites: favoritesReducer,\r\n        forecast: forecastReducer\r\n    }\r\n});\r\n\r\n\r\nexport type ReduxState = ReturnType<typeof reduxStore.getState>\r\nexport type ReduxDispatch = typeof reduxStore.dispatch;\r\nexport const useReduxDispatch = () => useDispatch<ReduxDispatch>();\r\nexport const useReduxSelector: TypedUseSelectorHook<ReduxState> = useSelector;","import {\r\n    WiDaySunny,\r\n    WiDaySunnyOvercast,\r\n    WiDayHaze,\r\n    WiDayCloudy,\r\n    WiCloudy,\r\n    WiFog,\r\n    WiShowers,\r\n    WiDayShowers,\r\n    WiThunderstorm,\r\n    WiDayThunderstorm,\r\n    WiRain,\r\n    WiSnow,\r\n    WiDaySnow,\r\n    WiSnowflakeCold,\r\n    WiSleet,\r\n    WiRainMix,\r\n    WiHot,\r\n    WiStrongWind,\r\n    WiNightClear,\r\n    WiNightPartlyCloudy,\r\n    WiNightCloudy,\r\n    WiNightFog,\r\n    WiNightShowers,\r\n    WiNightThunderstorm,\r\n    WiNightSnow,\r\n} from \"react-icons/wi\";\r\n\r\nimport { IconType } from 'react-icons'\r\n\r\ntype WeatherIcons = {\r\n    [i: number]: {\r\n        name: string;\r\n        day: boolean;\r\n        night: boolean;\r\n        Icon: IconType\r\n    }\r\n}\r\n\r\nconst weatherIcons: WeatherIcons = {\r\n    1: {\r\n        name: \"Sunny\",\r\n        day: true,\r\n        night: false,\r\n        Icon: WiDaySunny\r\n    },\r\n    2: {\r\n        name: \"Mostly Sunny\",\r\n        day: true,\r\n        night: false,\r\n        Icon: WiDaySunny\r\n    },\r\n    3: {\r\n        name: \"Partly Sunny\",\r\n        day: true,\r\n        night: false,\r\n        Icon: WiDaySunnyOvercast\r\n    },\r\n    4: {\r\n        name: \"Intermittent Clouds\",\r\n        day: true,\r\n        night: false,\r\n        Icon: WiDaySunnyOvercast\r\n    },\r\n    5: {\r\n        name: \"Hazy Sunshine\",\r\n        day: true,\r\n        night: false,\r\n        Icon: WiDayHaze\r\n    },\r\n    6: {\r\n        name: \"Mostly Cloudy\",\r\n        day: true,\r\n        night: false,\r\n        Icon: WiDayCloudy\r\n    },\r\n    7: {\r\n        name: \"Mostly Cloudy\",\r\n        day: true,\r\n        night: true,\r\n        Icon: WiCloudy\r\n    },\r\n    8: {\r\n        name: \"Dreary (Overcast)\",\r\n        day: true,\r\n        night: true,\r\n        Icon: WiCloudy\r\n    },\r\n    11: {\r\n        name: \"Fog\",\r\n        day: true,\r\n        night: true,\r\n        Icon: WiFog\r\n    },\r\n    12: {\r\n        name: \"Showers\",\r\n        day: true,\r\n        night: true,\r\n        Icon: WiShowers\r\n    },\r\n    13: {\r\n        name: \"Mostly Cloudy w/ Showers\",\r\n        day: true,\r\n        night: false,\r\n        Icon: WiDayShowers\r\n    },\r\n    14: {\r\n        name: \"Partly Sunny w/ Showers\",\r\n        day: true,\r\n        night: false,\r\n        Icon: WiDayShowers\r\n    },\r\n    15: {\r\n        name: \"T-Storms\",\r\n        day: true,\r\n        night: true,\r\n        Icon: WiThunderstorm\r\n    },\r\n    16: {\r\n        name: \"Mostly Cloudy w/ T-Storms\",\r\n        day: true,\r\n        night: false,\r\n        Icon: WiDayThunderstorm\r\n    },\r\n    17: {\r\n        name: \"Partly Sunny w/ T-Storms\",\r\n        day: true,\r\n        night: false,\r\n        Icon: WiDayThunderstorm\r\n    },\r\n    18: {\r\n        name: \"Rain\",\r\n        day: true,\r\n        night: true,\r\n        Icon: WiRain\r\n    },\r\n    19: {\r\n        name: \"Flurries\",\r\n        day: true,\r\n        night: true,\r\n        Icon: WiSnow\r\n    },\r\n    20: {\r\n        name: \"Mostly Cloudy w/ Flurries\",\r\n        day: true,\r\n        night: false,\r\n        Icon: WiDaySnow\r\n    },\r\n    21: {\r\n        name: \"Partly Sunny w/ Flurries\",\r\n        day: true,\r\n        night: false,\r\n        Icon: WiDaySnow\r\n    },\r\n    22: {\r\n        name: \"Snow\",\r\n        day: true,\r\n        night: true,\r\n        Icon: WiSnow\r\n    },\r\n    23: {\r\n        name: \"Mostly Cloudy w/ Snow\",\r\n        day: true,\r\n        night: false,\r\n        Icon: WiDaySnow\r\n    },\r\n    24: {\r\n        name: \"Ice\",\r\n        day: true,\r\n        night: true,\r\n        Icon: WiSnowflakeCold\r\n    },\r\n    25: {\r\n        name: \"Sleet\",\r\n        day: true,\r\n        night: true,\r\n        Icon: WiSleet\r\n    },\r\n    26: {\r\n        name: \"Freezing Rain\",\r\n        day: true,\r\n        night: true,\r\n        Icon: WiRainMix\r\n    },\r\n    29: {\r\n        name: \"Rain and Snow\",\r\n        day: true,\r\n        night: true,\r\n        Icon: WiRainMix\r\n    },\r\n    30: {\r\n        name: \"Hot\",\r\n        day: true,\r\n        night: true,\r\n        Icon: WiHot\r\n    },\r\n    31: {\r\n        name: \"Cold\",\r\n        day: true,\r\n        night: true,\r\n        Icon: WiSnowflakeCold\r\n    },\r\n    32: {\r\n        name: \"Windy\",\r\n        day: true,\r\n        night: true,\r\n        Icon: WiStrongWind\r\n    },\r\n    33: {\r\n        name: \"Clear\",\r\n        day: false,\r\n        night: true,\r\n        Icon: WiNightClear\r\n    },\r\n    34: {\r\n        name: \"Mostly Clear\",\r\n        day: false,\r\n        night: true,\r\n        Icon: WiNightPartlyCloudy\r\n    },\r\n    35: {\r\n        name: \"Partly Cloudy\",\r\n        day: false,\r\n        night: true,\r\n        Icon: WiNightPartlyCloudy\r\n    },\r\n    36: {\r\n        name: \"Intermittent Clouds\",\r\n        day: false,\r\n        night: true,\r\n        Icon: WiNightCloudy\r\n    },\r\n    37: {\r\n        name: \"Hazy Moonlight\",\r\n        day: false,\r\n        night: true,\r\n        Icon: WiNightFog\r\n    },\r\n    38: {\r\n        name: \"Mostly Cloudy\",\r\n        day: false,\r\n        night: true,\r\n        Icon: WiNightCloudy\r\n    },\r\n    39: {\r\n        name: \"Partly Cloudy w/ Showers\",\r\n        day: false,\r\n        night: true,\r\n        Icon: WiNightShowers\r\n    },\r\n    40: {\r\n        name: \"Mostly Cloudy w/ Showers\",\r\n        day: false,\r\n        night: true,\r\n        Icon: WiNightShowers\r\n    },\r\n    41: {\r\n        name: \"Partly Cloudy w/ T-Storms\",\r\n        day: false,\r\n        night: true,\r\n        Icon: WiNightThunderstorm\r\n    },\r\n    42: {\r\n        name: \"Mostly Cloudy w/ T-Storms\",\r\n        day: false,\r\n        night: true,\r\n        Icon: WiNightSnow\r\n    },\r\n    43: {\r\n        name: \"Mostly Cloudy w/ Flurries\",\r\n        day: false,\r\n        night: true,\r\n        Icon: WiNightThunderstorm\r\n    },\r\n    44: {\r\n        name: \"Mostly Cloudy w/ Snow\",\r\n        day: false,\r\n        night: true,\r\n        Icon: WiNightThunderstorm\r\n    },\r\n}\r\nexport default weatherIcons;","import weatherIcons from \"../assets/weatherIcons\";\r\nimport { Directions } from \"../types\";\r\nimport { ConfigurationState } from \"../types/states\";\r\n\r\n\r\n\r\n\r\n/** This function will set the theme value based on the given configration, if set to default it will lookup the browser default \r\n * if supported, 'light' otherwise.\r\n */\r\n\r\nexport function getTheme(selectedTheme: ConfigurationState[\"theme\"]): \"light\" | \"dark\" {\r\n    switch (selectedTheme) {\r\n        case \"light\": return \"light\";\r\n        case \"dark\": return \"dark\";\r\n        case \"default\":\r\n        default: return (matchMedia && matchMedia('(prefers-color-scheme: dark)').matches) ? \"dark\" : \"light\";\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * This function converts the country code to the corresponding emoji flag.\r\n * @see {@link https://dev.to/jorik/country-code-to-flag-emoji-a21} credit\r\n */\r\nexport function getFlagEmoji(countryCode: string) {\r\n    return countryCode.toUpperCase().replace(/./g, char =>\r\n        String.fromCodePoint(127397 + char.charCodeAt(0))\r\n    );\r\n}\r\n\r\nexport function getDirectionDegree(direction: Directions | string) {\r\n    switch (direction) {\r\n        case \"NNE\": return 22.5;\r\n        case \"NE\": return 45;\r\n        case \"ENE\": return 67.5;\r\n        case \"E\": return 90;\r\n        case \"ESE\": return 112.5;\r\n        case \"SE\": return 135;\r\n        case \"SSE\": return 157.5;\r\n        case \"S\": return 180;\r\n        case \"SSW\": return 202.5;\r\n        case \"SW\": return 225;\r\n        case \"WSW\": return 247.5;\r\n        case \"W\": return 270;\r\n        case \"WNW\": return 292.5;\r\n        case \"NW\": return 315;\r\n        case \"NNW\": return 337.5;\r\n        case \"N\":\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\n\r\nexport function getWeatherStyle(WeatherIcon: number | null) {\r\n    const { day, night } = WeatherIcon ? weatherIcons[WeatherIcon] : { day: true, night: true };\r\n    if (day && night)\r\n        return {\r\n            background: \"radial-gradient(circle, #e0ebef 0%, #b6c1c6 100%)\",\r\n            color: \"#64767d\"\r\n        };\r\n    if (day)\r\n        return {\r\n            background: \"radial-gradient(circle, #ffedb2 0%, #ffe696 100%)\",\r\n            color: \"#9a7400\"\r\n        };\r\n    return {\r\n        background: \"radial-gradient(circle, #183a53 0%, #08263b 100%)\",\r\n        color: \"#7599a9\"\r\n    };\r\n}\r\n\r\n\r\nexport function getDayOffest(offset: number) {\r\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n    return days[(new Date().getDay() + offset) % 7];\r\n}","import { NavigateFunction } from \"react-router\";\r\nimport { LocationData } from \"../types\";\r\nimport { forecastSliceActions } from \"../redux/reducers/forecastReducer\";\r\nimport { ReduxDispatch } from \"../redux/store\";\r\n\r\nconst setLocation = (location: LocationData,navigateTo?:string) => (dispatch: ReduxDispatch, navigate: NavigateFunction) => {\r\n    dispatch(forecastSliceActions.set_location(location));\r\n    navigate(navigateTo??`/forecast/${location.Key}`);\r\n}\r\n\r\nexport default setLocation;","import { Box, Typography } from '@mui/material'\r\nimport { useMemo } from 'react'\r\nimport weatherIcons from '../../../assets/weatherIcons';\r\n\r\ninterface WeatherDetailsBoxProps {\r\n    color: string;\r\n    WeatherIcon: number | null;\r\n    WeatherText: string;\r\n    Temperature: {\r\n        Value: number;\r\n        Unit: string;\r\n    }\r\n}\r\n\r\nexport default function WeatherDetailsBox({ color, WeatherText, Temperature, WeatherIcon }: WeatherDetailsBoxProps) {\r\n\r\n    const Wi = useMemo(() => WeatherIcon ? weatherIcons[WeatherIcon].Icon : null, [WeatherIcon]);\r\n\r\n\r\n    return <Box display=\"block\">\r\n        {Wi && <Wi size={128} color={color} style={{ position: \"absolute\", paddingTop: 16, paddingLeft: 16 }} />}\r\n\r\n        <Typography variant=\"h5\" color={color}\r\n            sx={{ position: \"relative\", width: \"100%\", textAlign: \"right\", px: 2, pt: 2, pb: 1 }}>\r\n            {WeatherText}\r\n        </Typography>\r\n\r\n        <Typography variant=\"h3\" color={color}\r\n            sx={{ position: \"relative\", width: \"100%\", textAlign: \"right\", px: 2, pt: 1, pb: 2 }}>\r\n            {Temperature.Value}°{Temperature.Unit}\r\n        </Typography>\r\n    </Box>\r\n\r\n}\r\n","import { useMemo } from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { Typography, CardActionArea, CardContent, Grid } from \"@mui/material\";\r\nimport { ArrowRightAlt } from \"@mui/icons-material\";\r\nimport { useReduxDispatch, useReduxSelector } from \"../../../redux/store\";\r\nimport { getDirectionDegree, getWeatherStyle } from \"../../../utils/functions\";\r\nimport { CurrentConditionData } from \"../../../types/interfaces/CurrentConditionData\";\r\nimport { Directions, LocationData } from \"../../../types\";\r\nimport setLocation from \"../../../actions/setLocation\";\r\nimport WeatherDetailsBox from \"./WeatherDetailsBox\";\r\n\r\ninterface DataCardProps {\r\n    favorite: LocationData;\r\n    data: CurrentConditionData;\r\n}\r\n\r\n\r\n\r\n\r\nfunction FavoriteDataContent({ favorite, data }: DataCardProps) {\r\n\r\n    const { unit } = useReduxSelector(s => s.configuration);\r\n    const navigate = useNavigate();\r\n    const dispatch = useReduxDispatch();\r\n\r\n\r\n\r\n\r\n    const { background, color } = useMemo(() => getWeatherStyle(data.WeatherIcon), [data.WeatherIcon]);\r\n\r\n\r\n    function navigateToFullForecast() {\r\n        setLocation(favorite)(dispatch, navigate);\r\n    }\r\n\r\n\r\n    return <>\r\n        <CardActionArea onClick={navigateToFullForecast} sx={{ background }}>\r\n            <WeatherDetailsBox color={color}\r\n                Temperature={{ Value: data.Temperature[unit].Value, Unit: data.Temperature[unit].Unit }}\r\n                WeatherIcon={data.WeatherIcon}\r\n                WeatherText={data.WeatherText}\r\n            />\r\n        </CardActionArea>\r\n        <CardContent>\r\n\r\n            {data.Wind.Speed[unit].Value &&\r\n                <ExtraWind speed={data.Wind.Speed[unit].Value}\r\n                    unit={data.Wind.Speed[unit].Unit}\r\n                    direction={data.Wind.Direction.English} />}\r\n\r\n            {data.RelativeHumidity &&\r\n                <ExtraHumidity humidity={data.RelativeHumidity} />}\r\n        </CardContent>\r\n    </>\r\n}\r\n\r\ninterface WindDirectionProps {\r\n    speed: number | null;\r\n    unit: string;\r\n    direction: Directions | string;\r\n}\r\n\r\nconst ExtraWind = ({ speed, unit, direction }: WindDirectionProps) => speed ?\r\n    <Grid container >\r\n        <Grid item >\r\n            <Typography variant=\"body1\">\r\n                <span style={{ fontWeight: 700 }}>Wind: </span>{speed} {unit} </Typography>\r\n        </Grid >\r\n        <Grid item  >\r\n            <ArrowRightAlt sx={{ transform: `rotate(${getDirectionDegree(direction) - 90}deg)` }} />\r\n        </Grid>\r\n        <Grid item alignSelf=\"top\">\r\n            <Typography variant=\"caption\" fontWeight={700}>{direction} </Typography>\r\n        </Grid >\r\n    </Grid >\r\n    : null;\r\n\r\n\r\nconst ExtraHumidity = ({ humidity }: { humidity: number }) =>\r\n    <Typography variant=\"body1\">\r\n        <span style={{ fontWeight: 700 }}>Humidity: </span>{humidity}% </Typography>;\r\n\r\nexport default FavoriteDataContent;\r\n\r\n\r\n","import { Button, CardActions, CardContent, Typography } from '@mui/material'\r\ninterface FavoriteErrorContentProps {\r\n    error: string;\r\n    onRemove: () => void;\r\n}\r\n\r\nexport default function FavoriteErrorContent({ error, onRemove }: FavoriteErrorContentProps) {\r\n\r\n    return <>\r\n        <CardContent  >\r\n            <Typography variant=\"body1\" textAlign=\"center\" fontWeight={700}>\r\n                There was an error loading the resource\r\n            </Typography>\r\n            <Typography variant=\"subtitle1\" textAlign=\"center\">{error}</Typography>\r\n        </CardContent>\r\n        <CardActions >\r\n            <Button onClick={onRemove} color=\"error\" >Remove</Button>\r\n        </CardActions>\r\n    </>\r\n}\r\n","import { Delete, Replay } from '@mui/icons-material'\r\nimport { CardHeader, IconButton, Typography } from '@mui/material'\r\n\r\ninterface FavoriteCardHeaderProps {\r\n    title: string;\r\n    editMode: boolean;\r\n    onRemove: () => void;\r\n    loading?: boolean;\r\n    onRefresh?: () => void;\r\n}\r\nexport default function FavoriteCardHeader({ title, editMode, loading, onRefresh, onRemove }: FavoriteCardHeaderProps) {\r\n    return <CardHeader\r\n        action={\r\n            editMode ?\r\n                <IconButton color=\"error\" onClick={onRemove}><Delete /></IconButton>\r\n                :\r\n                !loading && <IconButton aria-label=\"retry\" color=\"primary\" onClick={() => onRefresh && onRefresh()}><Replay /></IconButton>\r\n        }\r\n        title={<Typography variant=\"h6\">{title}</Typography>}\r\n    />\r\n}","import config from \"../config\";\r\nimport { favoritesSliceActions } from \"../redux/reducers/favoritesReducer\";\r\nimport { ReduxDispatch } from \"../redux/store\";\r\nimport { Languages } from \"../types\";\r\nimport { CurrentConditionData } from \"../types/interfaces/CurrentConditionData\";\r\n\r\nconst getCurrentCondition = (key: string, language?: Languages) =>\r\n    async (dispatch: ReduxDispatch): Promise<CurrentConditionData> => {\r\n\r\n        const params = new URLSearchParams([[\"apikey\", config.accuWeatherAPIKey], [\"details\", \"true\"]]);\r\n        language && params.append(\"language\", language);\r\n\r\n        const url = `https://dataservice.accuweather.com/currentconditions/v1/${key}?${params.toString()}`;\r\n        const response = await fetch(url);\r\n        const data = (await response.json())[0];\r\n        dispatch(favoritesSliceActions.set_current_condition({ Key: key, currentCondition: data }));\r\n        return data;\r\n    };\r\n\r\n\r\n\r\nexport default getCurrentCondition;","import { useMemo, useCallback, useEffect, useState } from 'react'\r\nimport { Card, CardContent, CircularProgress } from '@mui/material'\r\nimport FavoriteDataContent from './FavoriteDataContent';\r\nimport FavoriteErrorContent from './FavoriteErrorContent';\r\nimport { useReduxDispatch } from '../../../redux/store';\r\nimport { favoritesSliceActions } from '../../../redux/reducers/favoritesReducer';\r\nimport FavoriteCardHeader from './FavoriteCardHeader';\r\nimport { FavoriteData } from '../../../types/states';\r\nimport getCurrentCondition from '../../../actions/getCurrentCondition';\r\n\r\n\r\nconst LoadingContent = () => <CardContent sx={{ textAlign: \"center\", flexGrow: 1 }}><CircularProgress size={128} /></CardContent>\r\n\r\n\r\n\r\ninterface FavoriteCardProps {\r\n    data: FavoriteData;\r\n    editMode: boolean;\r\n}\r\n\r\nconst FavoriteCard = ({ data, editMode }: FavoriteCardProps) => {\r\n\r\n    const [error, setError] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const dispatch = useReduxDispatch();\r\n\r\n    const remove = useCallback(() =>\r\n        dispatch(favoritesSliceActions.remove_favorite(data.location.Key))\r\n        , [data.location.Key, dispatch]);\r\n\r\n    const refresh = useCallback(async () => {\r\n        setError(\"\");\r\n        setLoading(true);\r\n        try {\r\n            await getCurrentCondition(data.location.Key)(dispatch);\r\n\r\n        } catch (e) {\r\n            setError(`${e}`);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n\r\n    }, [data.location.Key, dispatch]);\r\n\r\n    /**This useEffect refreshes the currentCondition only if it's null, otherwise the data presists on remounts.\r\n     */\r\n    useEffect(() => {\r\n        if (!data.currentCondition)\r\n            refresh();\r\n    }, [data.currentCondition, refresh])\r\n\r\n    const RenderData = useMemo(() => {\r\n        if (loading) return <LoadingContent />\r\n        if (data.currentCondition) return <FavoriteDataContent favorite={data.location} data={data.currentCondition} />\r\n        return <FavoriteErrorContent error={error} onRemove={remove} />\r\n    }, [data, error, loading, remove])\r\n\r\n    return <Card sx={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"space-between\", minWidth: 320, height: 300 }}>\r\n        <FavoriteCardHeader editMode={editMode} title={data.location.LocalizedName} loading={loading}\r\n            onRemove={remove} onRefresh={refresh} />\r\n        {RenderData}\r\n    </Card>\r\n\r\n};\r\n\r\n\r\nexport default FavoriteCard;\r\n","import { Menu, MenuItem, MenuProps } from '@mui/material'\r\nimport { configurationSliceActions } from '../redux/reducers/configurationReducer';\r\nimport { useReduxDispatch } from '../redux/store'\r\n\r\n\r\n\r\nexport default function ThemeMenu(props: MenuProps) {\r\n\r\n    const dispatch = useReduxDispatch();\r\n\r\n    function selectTheme(value: \"light\" | \"dark\" | \"default\") {\r\n        dispatch(configurationSliceActions.set_theme(value));\r\n        props.onClose && props.onClose({}, \"backdropClick\");\r\n    }\r\n\r\n    return <Menu {...props}>\r\n        <MenuItem onClick={() => selectTheme(\"default\")}>System Default</MenuItem>\r\n        <MenuItem onClick={() => selectTheme(\"light\")}>Light</MenuItem>\r\n        <MenuItem onClick={() => selectTheme(\"dark\")}>Dark</MenuItem>\r\n    </Menu>\r\n}\r\n","import { Brightness2, BrightnessHigh, BrightnessAuto, Favorite, Home } from '@mui/icons-material'\r\nimport { AppBar, Button, ButtonProps, IconButton, Toolbar, Typography, useMediaQuery } from '@mui/material'\r\nimport { Theme } from '@mui/system';\r\nimport React, { ComponentType, useMemo, useState } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router'\r\nimport setLocation from '../actions/setLocation';\r\nimport { useReduxDispatch, useReduxSelector } from '../redux/store';\r\nimport ThemeMenu from './ThemeToggleModal';\r\n\r\n\r\n\r\ninterface CollapseButtonProps {\r\n    text: string;\r\n    collapsed?: boolean;\r\n    Icon: JSX.Element;\r\n}\r\nconst CollapseButton = ({ text, Icon, collapsed, ...props }: CollapseButtonProps & ButtonProps) => collapsed ?\r\n    <IconButton {...props}>{Icon}</IconButton> : <Button {...props} startIcon={Icon}>{text}</Button>\r\n\r\n\r\ninterface NavbarProps {\r\n    title: string;\r\n}\r\n\r\n\r\nexport default function Navbar({ title }: NavbarProps) {\r\n\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const dispatch = useReduxDispatch();\r\n    const [themeMenuAnchor, setThemeMenuAnchor] = useState<HTMLElement | null>(null);\r\n\r\n    const { default_location } = useReduxSelector(s => s.configuration);\r\n\r\n    const xs = useMediaQuery((_theme: Theme) => _theme.breakpoints.down(\"sm\"));\r\n\r\n\r\n    const { theme } = useReduxSelector(s => s.configuration);\r\n\r\n    const currentLocation = useMemo(() => {\r\n        switch (location.pathname) {\r\n            case \"/favorites\": return \"favorites\";\r\n            case \"/\": return \"home\"\r\n            default: return \"other\";\r\n        }\r\n    }, [location.pathname])\r\n\r\n\r\n    const ThemeIcon = useMemo(() => {\r\n        switch (theme) {\r\n            case \"light\": return BrightnessHigh;\r\n            case \"dark\": return Brightness2;\r\n            case \"default\":\r\n            default: return BrightnessAuto;\r\n        }\r\n    }, [theme])\r\n\r\n    return <>\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                {currentLocation !== \"home\" &&\r\n                    <IconButton size=\"large\" edge=\"start\" color=\"inherit\" aria-label=\"home\" sx={{ mr: 2 }}\r\n                        onClick={() => setLocation(default_location, \"/\")(dispatch, navigate)}>\r\n                        <Home />\r\n                    </IconButton>\r\n                }\r\n\r\n                <Typography variant=\"h6\" sx={{ flexGrow: 1 }}>{title}</Typography>\r\n\r\n                {currentLocation !== \"favorites\" &&\r\n                    <CollapseButton Icon={<Favorite />} text={\"Favorites\"} collapsed={xs}\r\n                        color=\"inherit\" onClick={() => navigate(\"/favorites\")} />\r\n                }\r\n                <CollapseButton Icon={<ThemeIcon />} text=\"Theme\" collapsed={xs}\r\n                    sx={{ mx: 2 }} color=\"inherit\"\r\n                    onClick={(e) => setThemeMenuAnchor(e.currentTarget)} />\r\n            </Toolbar>\r\n        </AppBar>\r\n        <ThemeMenu anchorEl={themeMenuAnchor} open={!!themeMenuAnchor} onClose={() => setThemeMenuAnchor(null)} />\r\n    </>\r\n}\r\n\r\n\r\n\r\n\r\nexport function withNavbar<T>(WrappedComponent: ComponentType<T>, navbarProps: NavbarProps) {\r\n    return (props: T) => <>\r\n        <Navbar {...navbarProps} />\r\n        <WrappedComponent {...props} />\r\n    </>\r\n}","import { Done, Edit } from '@mui/icons-material';\r\nimport { Button, Container, Grid } from '@mui/material';\r\nimport { useState } from 'react';\r\nimport { useReduxSelector } from '../../redux/store';\r\nimport FavoriteCard from './FavoriteCard';\r\nimport { withNavbar } from '../Navbar';\r\n\r\nfunction FavoritesPage() {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const { favorites } = useReduxSelector(s => s.favorites);\r\n\r\n\r\n    return <Container maxWidth=\"xl\" sx={{ my: 2 }}>\r\n        <Button sx={{ my: 2 }} startIcon={editMode ? <Done /> : <Edit />}\r\n            onClick={() => setEditMode(!editMode)}>\r\n            {editMode ? \"Done\" : \"Edit\"}\r\n        </Button>\r\n        <Grid container flexDirection=\"row\" justifyContent=\"flex-start\" spacing={2}>\r\n            {Object.entries(favorites).map(([key, value]) =>\r\n                <Grid item sm={12} md={6} lg={4} xl={3} key={key} flexGrow={1}>\r\n                    <FavoriteCard data={value} editMode={editMode} />\r\n                </Grid>\r\n            )}\r\n        </Grid>\r\n    </Container >\r\n}\r\n\r\nexport default withNavbar(FavoritesPage, { title: \"Favorites\" });","import React from 'react'\r\nimport FavoritesPage from '../components/FavoritesPage';\r\n\r\nfunction FavoritesRoute() {\r\n    return <FavoritesPage />\r\n}\r\n\r\n\r\nexport default FavoritesRoute;","import { useCallback, useState } from \"react\";\r\nimport config from \"../config\";\r\nimport { Languages } from \"../types\";\r\nimport { AutocompleteData } from \"../types/autocomplete\";\r\n\r\n\r\nasync function fetchPredictions(query: string, language?: Languages): Promise<AutocompleteData[]> {\r\n\r\n    const params = new URLSearchParams([[\"apikey\", config.accuWeatherAPIKey], [\"q\", query]]);\r\n    language && params.append(\"language\", language);\r\n\r\n    const url = `https://dataservice.accuweather.com/locations/v1/cities/autocomplete?${params.toString()}`\r\n\r\n    return (await fetch(url)).json();\r\n}\r\n\r\n\r\n\r\ninterface AutocompleteConfig {\r\n    language?: Languages;\r\n}\r\n\r\n\r\nconst useAutocomplete = (autocompleteConfig?: AutocompleteConfig) => {\r\n\r\n    const [predictions, setPredictions] = useState<AutocompleteData[]>([]);\r\n\r\n    const [loading, setLoading] = useState(false)\r\n    //TODO: generalize errors.\r\n    const [error, setError] = useState<any>(null)\r\n\r\n    const getPredictions = useCallback(async (input: string) => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchPredictions(input, autocompleteConfig?.language);\r\n            setPredictions(data);\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [autocompleteConfig?.language]);\r\n\r\n    return { predictions, error, loading, getPredictions };\r\n}\r\n\r\nexport default useAutocomplete;","import { LocationOn } from '@mui/icons-material';\r\nimport { Autocomplete, CircularProgress, Grid, TextField, Typography } from '@mui/material'\r\nimport { useState } from 'react';\r\nimport { useNavigate } from 'react-router';\r\nimport useAutocomplete from '../hooks/useAutocomplete';\r\nimport { useReduxDispatch } from '../redux/store';\r\nimport { AutocompleteData } from '../types/autocomplete';\r\nimport { getFlagEmoji } from '../utils/functions';\r\nimport setLocation from '../actions/setLocation';\r\n\r\ninterface PredictionItemProps {\r\n    option: AutocompleteData;\r\n}\r\n\r\nfunction PredictionItem({ option, ...props }: PredictionItemProps) {\r\n    return <li {...props}>\r\n        <Grid container alignItems=\"center\" spacing={2}>\r\n            <Grid item> <LocationOn color=\"secondary\" /> </Grid>\r\n            <Grid item xs>\r\n                <Typography variant=\"body1\" >\r\n                    {<span style={{ fontWeight: 700 }}>{option.LocalizedName}</span>}\r\n                    {<span>, {option.AdministrativeArea.LocalizedName}</span>}\r\n                    {<span style={{ color: \"grey\" }}>, {getFlagEmoji(option.Country.ID)}</span>}\r\n                </Typography>\r\n            </Grid>\r\n        </Grid>\r\n    </li >\r\n}\r\n\r\n\r\n\r\nexport default function AutocompleteSearchbar() {\r\n\r\n    const [inputString, setInputString] = useState(\"\");\r\n    const { predictions, loading, getPredictions } = useAutocomplete();\r\n    const dispatch = useReduxDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    function onChange(input: string) {\r\n        setInputString(input);\r\n        getPredictions(input);\r\n    }\r\n\r\n    function onSelect(option: AutocompleteData) {\r\n        const { Key, LocalizedName } = option;\r\n        setLocation({ Key, LocalizedName })(dispatch, navigate);\r\n    }\r\n\r\n\r\n    return <Autocomplete fullWidth\r\n        autoComplete\r\n        options={predictions}\r\n        filterOptions={x => x}\r\n        onChange={(e, v) => v && onSelect(v)}\r\n        getOptionLabel={(option) => option.LocalizedName}\r\n        isOptionEqualToValue={(option, value) => option.Key === value.Key}\r\n        renderInput={(params) =>\r\n            <TextField {...params} value={inputString} fullWidth\r\n                variant=\"filled\" label=\"Search for a location\"\r\n                onChange={e => onChange(e.target.value)} InputProps={{\r\n                    ...params.InputProps,\r\n                    type: 'search',\r\n                    endAdornment: loading && <CircularProgress size={24} />\r\n                }} />\r\n        }\r\n        renderOption={(params, option) => <PredictionItem {...params} option={option} />}\r\n    />\r\n}\r\n","import config from \"../config\";\r\nimport { forecastSliceActions } from \"../redux/reducers/forecastReducer\";\r\nimport { ReduxDispatch } from \"../redux/store\";\r\nimport { UnitSystem, Languages } from \"../types\";\r\nimport { ForecastData } from \"../types/interfaces/ForecastData\";\r\n\r\nconst getForecast = (key: string, unitSystem: UnitSystem, language?: Languages) =>\r\n    async (dispatch: ReduxDispatch): Promise<ForecastData> => {\r\n\r\n        const params = new URLSearchParams([[\"apikey\", config.accuWeatherAPIKey], [\"details\", \"true\"]]);\r\n        language && params.append(\"language\", language);\r\n        unitSystem === \"Metric\" && params.append(\"metric\", \"true\");\r\n\r\n        const url = `https://dataservice.accuweather.com/forecasts/v1/daily/5day/${key}?${params.toString()}`;\r\n        try {\r\n            const data = await (await fetch(url)).json();\r\n            dispatch(forecastSliceActions.set_forecast(data));\r\n            return data;\r\n        } catch (e) {\r\n            dispatch(forecastSliceActions.set_forecast(null));\r\n            throw Error(`${e}`);\r\n        }\r\n    };\r\n\r\nexport default getForecast;","import { createContext, useCallback, useContext, useMemo, useState } from \"react\"\r\nimport { Snackbar, SnackbarOrigin } from \"@mui/material\";\r\n\r\nconst Context = createContext({});\r\n\r\n\r\ninterface SnackbarConfig {\r\n    buttons?: JSX.Element[];\r\n    autoHideDuration?: number;\r\n    anchorOrigin?: SnackbarOrigin;\r\n    onDismiss?: () => void;\r\n}\r\n\r\ntype SnackbarFunction = (msg: string, snConfig?: SnackbarConfig) => void;\r\n\r\ntype SnackbarHandler = {\r\n    close: () => void;\r\n}\r\n\r\nexport const SnackbarContextProvider: React.FC = ({ children }) => {\r\n\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n    const [config, setConfig] = useState<SnackbarConfig | undefined>();\r\n\r\n\r\n    const handleClose = useCallback(() => {\r\n        setOpen(false);\r\n        config?.onDismiss && config.onDismiss();\r\n    }, [config]);\r\n\r\n    const snackbarHandler: SnackbarHandler = useMemo(() => ({\r\n        close: handleClose\r\n    }), [handleClose]);\r\n\r\n    const snackbar: SnackbarFunction = useCallback((msg: string, snConfig?: SnackbarConfig) => {\r\n        setOpen(false);\r\n        setConfig(snConfig);\r\n        setMessage(msg);\r\n        setOpen(true)\r\n    }, []);\r\n\r\n\r\n\r\n    return <Context.Provider value={{ snackbar, snackbarHandler }}>\r\n        <Snackbar\r\n            open={open} message={message} onClose={handleClose}\r\n            autoHideDuration={config?.autoHideDuration}\r\n            anchorOrigin={{ horizontal: \"center\", vertical: \"bottom\" }}\r\n            action={<>{config?.buttons}</>}\r\n        />\r\n        {children}\r\n\r\n    </Context.Provider >\r\n}\r\n\r\nconst useSnackbar = () => useContext(Context);\r\nexport default useSnackbar as () => { snackbar: SnackbarFunction, snackbarHandler: SnackbarHandler };\r\n","import { Box, Typography, TypographyProps } from \"@mui/material\";\r\nimport { useMemo } from \"react\";\r\nimport weatherIcons from \"../../assets/weatherIcons\";\r\nimport { DailyForecast } from \"../../types/interfaces/ForecastData\";\r\n\r\n\r\ninterface MinMaxTextProps {\r\n    min: number | null;\r\n    max: number | null;\r\n    unit: string;\r\n}\r\nconst MinMaxText = ({ min, max, unit, ...props }: MinMaxTextProps & TypographyProps) =>\r\n    <Typography {...props}>{max ? `${max}°${unit}` : \"N/A\"} \\ {min ? `${min}°${unit}` : \"N/A\"}</Typography>\r\n\r\n\r\ninterface MinimalDetailsProps {\r\n    color: string;\r\n    iconIndex: number | null;\r\n    day: string;\r\n    weatherText: string;\r\n    Temperature: DailyForecast[\"Temperature\"];\r\n    iconSize: number;\r\n}\r\n\r\nexport default function DailyDetailsBox({ color, day, weatherText, iconSize, Temperature, iconIndex }: MinimalDetailsProps) {\r\n\r\n    const Wi = useMemo(() => iconIndex ? weatherIcons[iconIndex].Icon : null, [iconIndex]);\r\n\r\n    return <Box display=\"block\">\r\n        {Wi && <Wi size={iconSize} color={color} style={{ position: \"absolute\", paddingTop: 16, paddingLeft: 16 }} />}\r\n\r\n        <Typography variant=\"h5\" color={color}\r\n            sx={{ position: \"relative\", width: \"100%\", textAlign: \"right\", px: 2, pt: 2, pb: 1 }}>\r\n            {day}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color={color} \r\n            sx={{ position: \"relative\", width: \"100%\", textAlign: \"right\", px: 2, }}>\r\n            {weatherText}\r\n        </Typography>\r\n        <MinMaxText variant=\"h5\" color={color} textAlign=\"right\" sx={{ px: 2, pb: 1 }}\r\n            min={Temperature.Minimum.Value}\r\n            max={Temperature.Maximum.Value}\r\n            unit={Temperature.Maximum.Unit} />\r\n    </Box>\r\n\r\n}\r\n\r\n\r\n","import { Card } from \"@mui/material\";\r\nimport { useMemo } from \"react\";\r\nimport { useReduxSelector } from \"../../redux/store\";\r\nimport { DailyForecast } from \"../../types/interfaces/ForecastData\";\r\nimport { getDayOffest, getWeatherStyle } from \"../../utils/functions\";\r\nimport DailyDetailsBox from \"./DailyDetailsBox\";\r\n\r\ninterface DailyDetailsProps {\r\n    data: DailyForecast;\r\n    time: \"Day\" | \"Night\";\r\n    index: number;\r\n}\r\n\r\nexport default function DailyDetails({ data, time, index }: DailyDetailsProps) {\r\n\r\n    const { show_night } = useReduxSelector(s => s.configuration);\r\n\r\n    const icon = useMemo(() => show_night ? data.Night.Icon : data.Day.Icon\r\n        , [data.Day.Icon, data.Night.Icon, show_night]);\r\n\r\n    const { color, background } = useMemo(() => getWeatherStyle(icon), [icon])\r\n\r\n    const day = useMemo(() => getDayOffest(index).substr(0, 3), [index]);\r\n\r\n    return <Card sx={{ minWidth: 210, background }}>\r\n        <DailyDetailsBox iconSize={64} color={color} day={day} weatherText={data[time].IconPhrase}\r\n            Temperature={data.Temperature} iconIndex={icon} />\r\n    </Card >\r\n\r\n}\r\n","import { Grid } from '@mui/material'\r\nimport React from 'react'\r\nimport { ForecastData } from '../../types/interfaces/ForecastData'\r\nimport DailyDetails from './DailyDetails'\r\n\r\ninterface DailyDetailsContainerProps {\r\n    data: ForecastData[\"DailyForecasts\"];\r\n    time: \"Day\" | \"Night\";\r\n}\r\nexport default function DailyDetailsContainer({ data, time }: DailyDetailsContainerProps) {\r\n    return <Grid container spacing={2} justifyContent=\"space-around\">\r\n        {data.map((daily, index) =>\r\n            <Grid item xs >\r\n                <DailyDetails data={daily} index={index} key={index} time={time} />\r\n            </Grid>\r\n        )}\r\n    </Grid>\r\n}\r\n","import { WbSunny, NightsStay, Favorite, FavoriteBorder, Thermostat } from '@mui/icons-material'\r\nimport { Button, CardActions, IconButton } from '@mui/material'\r\nimport { useMemo } from 'react'\r\nimport { configurationSliceActions } from '../../redux/reducers/configurationReducer'\r\nimport { favoritesSliceActions } from '../../redux/reducers/favoritesReducer'\r\nimport { useReduxDispatch, useReduxSelector } from '../../redux/store'\r\nimport { LocationData, UnitSystem } from '../../types'\r\nimport { getWeatherStyle } from '../../utils/functions'\r\n\r\n\r\n\r\ninterface ForecastSummaryButtonsProps {\r\n    location: LocationData;\r\n    onRefresh: (newUnit?: UnitSystem) => void;\r\n}\r\n\r\nexport default function ForecastSummaryButtons({ location, onRefresh }: ForecastSummaryButtonsProps) {\r\n\r\n    const { show_night, unit } = useReduxSelector(s => s.configuration);\r\n    const { favorites } = useReduxSelector(s => s.favorites);\r\n    const dispatch = useReduxDispatch();\r\n\r\n    const favorited = useMemo(() => Object.keys(favorites).includes(location.Key), [favorites, location.Key]);\r\n\r\n    const { color } = getWeatherStyle(show_night ? 1 : 33);\r\n\r\n    return <CardActions sx={{ float: 'right' }}>\r\n        <Button variant={favorited ? \"text\" : \"contained\"} startIcon={favorited ? <FavoriteBorder /> : <Favorite />}\r\n            onClick={() => favorited ?\r\n                dispatch(favoritesSliceActions.remove_favorite(location.Key))\r\n                : dispatch(favoritesSliceActions.add_favorite(location))\r\n            }>\r\n            {favorited ? \"Remove Favorite\" : \"Add Favorite\"}</Button>\r\n        <Button startIcon={<Thermostat />}\r\n            onClick={() => {\r\n                const newUnit = unit === \"Metric\" ? \"Imperial\" : \"Metric\"\r\n                dispatch(configurationSliceActions.set_unit(newUnit))\r\n                onRefresh(newUnit);\r\n            }}>\r\n            {unit === \"Metric\" ? \"F\" : \"C\"}</Button>\r\n        <IconButton sx={{ color }}\r\n            onClick={() => dispatch(configurationSliceActions.set_night(!show_night))}>\r\n            {show_night ? <WbSunny /> : <NightsStay />}\r\n        </IconButton>\r\n    </CardActions>\r\n}","import { Card, CardActions, CardContent, Grid, Skeleton } from \"@mui/material\";\r\n\r\nexport default function LoadingSkeleton() {\r\n    return <Card sx={{ flexGrow: 1 }}>\r\n        <CardActions />\r\n        <Skeleton width=\"100%\" height={165} />\r\n        <CardContent>\r\n            <div style={{ height: 250 }} />\r\n            <Grid container spacing={2} justifyContent=\"space-around\">\r\n                {Array(5).fill(null).map((v, i) => <Grid item xs key={i}>\r\n                    <Skeleton height={250} sx={{ minWidth: 180, p: 1 }} />\r\n                </Grid>)}\r\n            </Grid>\r\n        </CardContent>\r\n    </Card>\r\n}\r\n","import { Box, Typography } from \"@mui/material\";\r\nimport { useMemo } from \"react\";\r\nimport weatherIcons from \"../../assets/weatherIcons\";\r\n\r\ninterface MinimalDetailsProps {\r\n    color: string;\r\n    WeatherIcon: number | null;\r\n    text: string;\r\n    Temperature: {\r\n        Value: number | null;\r\n        Unit: string;\r\n    };\r\n    iconSize: number;\r\n}\r\n\r\nexport default function MinimalDetail({ color, text, iconSize, Temperature, WeatherIcon }: MinimalDetailsProps) {\r\n\r\n    const Wi = useMemo(() => WeatherIcon ? weatherIcons[WeatherIcon].Icon : null, [WeatherIcon]);\r\n    \r\n    return <Box display=\"block\">\r\n        {Wi && <Wi size={iconSize} color={color} style={{ position: \"absolute\", paddingTop: 16, paddingLeft: 16 }} />}\r\n\r\n        <Typography variant=\"h5\" color={color}\r\n            sx={{ position: \"relative\", width: \"100%\", textAlign: \"right\", px: 2, pt: 2, pb: 1 }}>\r\n            {text}\r\n        </Typography>\r\n\r\n        <Typography variant=\"h3\" color={color}\r\n            sx={{ position: \"relative\", width: \"100%\", textAlign: \"right\", px: 2, pt: 1, pb: 2 }}>\r\n            {Temperature.Value ? `${Temperature.Value}°${Temperature.Unit}` : \"N/A\"}\r\n        </Typography>\r\n    </Box>\r\n\r\n}\r\n","import { Box, Button, Card, CardContent, CardMedia, Container, Grid, Typography, useMediaQuery } from \"@mui/material\";\r\nimport { Theme } from \"@mui/system\";\r\nimport { memo, useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport getForecast from \"../../actions/getForecast\";\r\nimport setLocation from \"../../actions/setLocation\";\r\nimport useSnackbar from \"../../hooks/useSnackbar\";\r\nimport { useReduxDispatch, useReduxSelector } from \"../../redux/store\";\r\nimport { UnitSystem } from \"../../types\";\r\nimport { getWeatherStyle } from \"../../utils/functions\";\r\nimport DailyDetailsContainer from \"./DailyDetailsContainer\";\r\nimport ForecastSummaryButtons from \"./ForecastSummaryButtons\";\r\nimport LoadingSkeleton from \"./LoadingSkeleton\";\r\nimport MinimalDetail from \"./MinimalDetails\";\r\n\r\n\r\n\r\ninterface ForecasetHeadlingProps { color: string; text: string; small: boolean }\r\nconst ForecastHeadline = ({ color, text, small }: ForecasetHeadlingProps) =>\r\n    <Grid item container sx={{ height: 250 }} justifyContent=\"center\" alignContent=\"center\">\r\n        <Grid item ><Typography variant={small ? \"h5\" : \"h4\"} color={color} textAlign=\"center\" >{text}</Typography></Grid>\r\n    </Grid>;\r\n\r\ninterface ForecastSummaryProps {\r\n    id: string;\r\n}\r\n\r\nconst ForecastSummary = memo(({ id }: ForecastSummaryProps) => {\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const { default_location } = useReduxSelector(s => s.configuration);\r\n    const { unit, show_night } = useReduxSelector(s => s.configuration);\r\n    const { location, forecast } = useReduxSelector(s => s.forecast);\r\n\r\n    const sm = useMediaQuery((theme: Theme) => theme.breakpoints.down(\"sm\"))\r\n\r\n    const dispatch = useReduxDispatch();\r\n    const navigate = useNavigate();\r\n    const { snackbar, snackbarHandler } = useSnackbar();\r\n\r\n    const refresh = useCallback(async (newUnit?: UnitSystem) => {\r\n        setLoading(true);\r\n        try {\r\n            await getForecast(id, newUnit ?? unit)(dispatch);\r\n        } catch (e) {\r\n            setLocation(default_location, \"/\")(dispatch, navigate);\r\n            snackbar(`${e}`, {\r\n                buttons: [\r\n                    <Button color=\"secondary\" onClick={snackbarHandler.close}>Dismiss</Button>]\r\n            });\r\n\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [default_location, dispatch, id, navigate, snackbar, snackbarHandler.close, unit]);\r\n\r\n    useEffect(() => {\r\n        refresh();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    const time = useMemo(() => show_night ? \"Night\" : \"Day\", [show_night]);\r\n\r\n    const { color, background } = useMemo(() =>\r\n        getWeatherStyle(forecast ? forecast.DailyForecasts[0][time].Icon : null)\r\n        , [time, forecast])\r\n\r\n    return <Container maxWidth=\"lg\" sx={{ display: \"flex\" }}>\r\n        {loading ? <LoadingSkeleton /> :\r\n            <Card sx={{ flexGrow: 1 }}>\r\n                {forecast && <>\r\n                    <ForecastSummaryButtons location={location} onRefresh={refresh} />\r\n                    <Box sx={{}}>\r\n                        <Grid container component={CardMedia} sx={{ background }}\r\n                            alignItems=\"center\" justifyContent=\"space-between\" flexWrap=\"nowrap\" >\r\n                            <Box sx={{ left: 0, width: 320 }}>\r\n                                <MinimalDetail iconSize={96}\r\n                                    text={location.LocalizedName}\r\n                                    Temperature={{\r\n                                        Value: forecast.DailyForecasts[0].Temperature.Maximum.Value,\r\n                                        Unit: forecast.DailyForecasts[0].Temperature.Maximum.Unit\r\n                                    }}\r\n                                    WeatherIcon={forecast.DailyForecasts[0][time].Icon}\r\n                                    color={color} />\r\n                            </Box>\r\n                        </Grid>\r\n                        <CardContent>\r\n                            <ForecastHeadline color={color} small={sm} text={forecast.Headline.Text} />\r\n                            <DailyDetailsContainer data={forecast.DailyForecasts} time={time} />\r\n                        </CardContent>\r\n                    </Box>\r\n                </>}\r\n            </Card>\r\n        }\r\n    </Container >\r\n}, (prev, next) => prev.id !== next.id);\r\n\r\nexport default ForecastSummary;\r\n","import { useParams } from 'react-router'\r\nimport ForecastSummary from '../components/ForecastSummary'\r\n\r\nexport default function ForecastRoute() {\r\n\r\n    const params = useParams();\r\n\r\n    return params.id ? <ForecastSummary id={params.id} /> : null;\r\n}\r\n","import { Grid } from \"@mui/material\";\r\nimport { Route, Routes } from \"react-router\";\r\nimport AutocompleteSearchbar from \"../components/AutocompleteSearchbar\";\r\nimport ForecastSummary from \"../components/ForecastSummary\";\r\nimport { withNavbar } from \"../components/Navbar\";\r\nimport { useReduxSelector } from \"../redux/store\";\r\nimport ForecastRoute from \"./ForecastRoute\";\r\n\r\nfunction HomeRoute() {\r\n\r\n    const { default_location } = useReduxSelector(s => s.configuration);\r\n\r\n    return <Grid container direction=\"row\" spacing={2} sx={{ p: 2 }} justifyContent=\"center\" >\r\n        <Grid item xs alignSelf=\"center\" maxWidth={500} >\r\n            <AutocompleteSearchbar />\r\n        </Grid>\r\n        <Grid item xs={12} justifyContent=\"center\">\r\n\r\n            <Routes>\r\n                <Route path=\"forecast/:id\" element={<ForecastRoute />} />\r\n                {/* //TODO: ADD default endpoint. */}\r\n                <Route path=\"*\" element={<ForecastSummary id={default_location.Key} />} />\r\n            </Routes>\r\n        </Grid>\r\n    </Grid>\r\n\r\n}\r\n\r\nexport default withNavbar(HomeRoute, { title: \"Herolo Weather App\" });","import { Route, Routes, BrowserRouter } from 'react-router-dom'\r\nimport FavoritesRoute from './FavoritesRoute'\r\n\r\nimport HomeRoute from './HomeRoute'\r\n\r\nexport default function AppRouter() {\r\n    return <BrowserRouter>\r\n        <Routes>\r\n            <Route path=\"/*\" element={<HomeRoute />} />\r\n            <Route path=\"/favorites\" element={<FavoritesRoute />} />\r\n        </Routes>\r\n\r\n    </BrowserRouter>\r\n}\r\n","import config from \"../config\";\r\nimport { configurationSliceActions } from \"../redux/reducers/configurationReducer\";\r\nimport { ReduxDispatch } from \"../redux/store\";\r\nimport { LocationData } from \"../types\";\r\n\r\nconst getGeolocationData = (lat: number, lng: number) =>\r\n    async (dispatch: ReduxDispatch): Promise<LocationData> => {\r\n\r\n        const searchParams = new URLSearchParams\r\n            ([[\"apikey\", config.accuWeatherAPIKey],\r\n            [\"q\", `${lat},${lng}`],\r\n            [\"details\", \"true\"]]);\r\n\r\n        const url = `https://dataservice.accuweather.com/locations/v1/cities/geoposition/search?${searchParams.toString()}`;\r\n\r\n        try{\r\n\r\n            const { Key, LocalizedName } :LocationData= await (await fetch(url)).json();\r\n            \r\n            dispatch(configurationSliceActions.set_default_location({ Key, LocalizedName }));\r\n            \r\n            return { Key, LocalizedName };\r\n        }catch(e){\r\n            throw Error(\"Can't get geolocation data\");\r\n        }\r\n    }\r\n\r\nexport default getGeolocationData;","import { Provider } from \"react-redux\";\r\nimport { ThemeProvider, createTheme, CssBaseline } from \"@mui/material\";\r\nimport { reduxStore, useReduxDispatch, useReduxSelector } from \"./redux/store\";\r\nimport AppRouter from \"./router\";\r\nimport { getTheme } from \"./utils/functions\";\r\nimport useSnackbar, { SnackbarContextProvider } from \"./hooks/useSnackbar\";\r\nimport getGeolocationData from \"./actions/getGeolocationData\";\r\nimport { useEffect } from \"react\";\r\n\r\nfunction App() {\r\n  return <Provider store={reduxStore}>\r\n    <DarkModeApp />\r\n  </Provider>\r\n\r\n}\r\n\r\nfunction DarkModeApp() {\r\n  const configuration = useReduxSelector(s => s.configuration);\r\n  const theme = createTheme({ palette: { mode: getTheme(configuration.theme), } })\r\n\r\n\r\n  return <ThemeProvider theme={theme}>\r\n    <CssBaseline />\r\n    <SnackbarContextProvider>\r\n      {navigator.geolocation ? <GeolocationEnabledApp /> : <AppRouter />}\r\n    </SnackbarContextProvider>\r\n  </ThemeProvider>\r\n}\r\n\r\n\r\nfunction GeolocationEnabledApp() {\r\n\r\n\r\n  const { snackbar } = useSnackbar();\r\n  const dispatch = useReduxDispatch();\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(async (data) => {\r\n      const { latitude, longitude } = data.coords;\r\n      try {\r\n        await getGeolocationData(latitude, longitude)(dispatch);\r\n      } catch (e) {\r\n        snackbar(`${e}`);\r\n      }\r\n    }, () => snackbar(\"Can't get your location, please enable geolocation access\"));\r\n  }, [dispatch, snackbar])\r\n\r\n  return <AppRouter />\r\n}\r\n\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}